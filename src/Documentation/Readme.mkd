# Documentation

## About the examples

All examples in the JsonLd.Docu project and its subfolders are generated from actual code files. Each folder contains a Readme.cs file,
which is parsed and converted into a Readme.md file so that it's nicely viewable on GitHub. Each example is a compiled and runnable unit
test, which you can try out and debug in the solution.

## Basic usage

First let's import the required namespaces.
 

``` c#
using System;
using System.Collections.Generic;
using JsonLD.Entities;
using Newtonsoft.Json.Linq;
using Xunit;
```

### Deserialization

#### Deserializing the model as-is

The easiest operation possible is to deserialize a JSON-LD object without any changes. The example models will be deserialized to 
instances of a Person class.
 

``` c#
public class Person
{
    public Uri Id { get; set; }

    public string Name { get; set; }

    public string LastName { get; set; }

    public IEnumerable<Uri> Types
    {
        get { yield return new Uri("http://xmlns.com/foaf/0.1/Person"); }
    }
}
```

Serialization and deserialization is done by instances of `IEntitySerializer`. It's default implementation requires you to pass a 
IContextProvider, which provides [@context][jsonld-context] objects for serialized types. Because, we don't want to use a context in the
first test, the IContextProvider object won't be set up in any way.

Note how the JSON-LD `@id` is by convention deserialized to the `Person#Id` property.

``` c#
public class Deserialization
{

[Fact]
public void Can_deserialize_with_existing_structure()
{
    // given
    var json = JObject.Parse(@"
    {
        '@context': {
           'foaf': 'http://xmlns.com/foaf/0.1/',
           'name': 'foaf:name',
           'lastName': 'foaf:familyName',
           'Person': 'foaf:Person'
        },
        '@id': 'http://t-code.pl/#tomasz',
        '@type': 'Person',
        'name': 'Tomasz',
        'lastName': 'Pluskiewicz'
    }");

    // when
    IEntitySerializer serializer = new EntitySerializer(new StaticContextProvider());
    var person = serializer.Deserialize<Person>(json);

    // then
    Assert.Equal("Tomasz", person.Name);
    Assert.Equal("Pluskiewicz", person.LastName);
    Assert.Equal(new Uri("http://t-code.pl/#tomasz"), person.Id);
}
```

#### Deserialize with specific @context

Oftentimes, like in public API, you could receive models, which do not conform to some specific JSON structure. With JSON-LD it is possible,
becuase any document can be represented in numerous equivalent ways. For that purpose the [specification][jsonld-spec] defines a set of
[algorithms][jsonld-api], which can transform a JSON-LD document between those representations.

Below example shows how the default `IContextProvider` is used to adjust the document strucuture before deserializing. Perceptive reader
would have probably noticed already that the `@context` must conform to model's properties. Pascal case in c#, camel case in JSON.

``` c#
[Fact]
public void Can_deserialize_with_changed_context()
{
    // given
    var expanded = JObject.Parse(@"
    {
        '@id': 'http://t-code.pl/#tomasz',
        '@type': 'http://xmlns.com/foaf/0.1/Person',
        'http://xmlns.com/foaf/0.1/name': 'Tomasz',
        'http://xmlns.com/foaf/0.1/familyName': 'Pluskiewicz'
    }");

    var @context = JObject.Parse(@"
    {
        'foaf': 'http://xmlns.com/foaf/0.1/',
        'name': 'foaf:name',
        'lastName': 'foaf:familyName',
        'Person': 'foaf:Person'
    }");

    var contextProvider = new StaticContextProvider();
    contextProvider.SetContext(typeof(Person), @context);

    // when
    IEntitySerializer serializer = new EntitySerializer(contextProvider);
    var person = serializer.Deserialize<Person>(expanded);

    // then
    Assert.Equal("Tomasz", person.Name);
    Assert.Equal("Pluskiewicz", person.LastName);
    Assert.Equal(new Uri("http://t-code.pl/#tomasz"), person.Id);
}
}
```

### Serialization

Of course it also possible to serialize POCO objects to JSON-LD objects.

``` c#
public class Serialization
{

[Fact]
public void Can_serialize_object_to_JSON_LD()
{
    // given
    var person = new Person
        {
            Id = new Uri("http://t-code.pl/#tomasz"),
            Name = "Tomasz",
            LastName = "Pluskiewicz"
        };

    // when
    IEntitySerializer serializer = new EntitySerializer();
    dynamic json = serializer.Serialize(person);

    // then
    Assert.Equal("Tomasz", (string)json.name);
    Assert.Equal("Pluskiewicz", (string)json.lastName);
    Assert.Equal("http://t-code.pl/#tomasz", (string)json["@id"]);
    Assert.Equal("http://xmlns.com/foaf/0.1/Person", (string)json["@type"][0]);
}
}
```

[playground]: http://json-ld.org/playground/
[jsonld-spec]: http://json-ld.org/spec/latest/json-ld/
[jsonld-api]: http://www.w3.org/TR/json-ld-api/
[jsonld]: http://json-ld.org
[rdf]: http://en.wikipedia.org/wiki/Resource_Description_Framework
[readme]: http://github.com/wikibus/JsonLD.Entities/blob/master/src/JsonLD.Docu/Readme.cs
[jsonld-context]: http://www.w3.org/TR/json-ld/#the-context
