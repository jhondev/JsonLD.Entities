# Documentation

## Building the `@context` programmatically

The most reasonable way for creating the `@context` is to produce a `JObject` (or `JArray`) with the desired structure programmatically.
This way it would also be possible to reuse and modify common contexts shared by hierarchies of classes. To simplify the repetitive chore
of creating complex objects and introduce some semantics into the code, JsonLd.Entities introduces a number of helper methods, which can be
used to create parts of the `@context` strucutre. They make it simpler to use advanced features like [type coercion][coercion],
[internationalization][i8n] or [@reverse][reverse].

First let's start with the usual preamble.
 

``` c#
using System;
using JsonLD.Entities.Context;
using Newtonsoft.Json.Linq;
using Xunit;

public class FluentSyntaxForBuildingContext
{
```

### Define `@context` inline with class definition

``` c#
[Fact]
public void BuildComplexContextSimply()
{
    // given
    const string expected = @"
{
    '@base': 'http://example.com/',
    '@vocab': 'http://schema.org/',
    'dcterms': 'http://purl.org/dc/terms/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'title': 'dcterms:title',
    'creator': { 
        '@id': 'dcterms:creator', 
        '@type': '@id'
    },
    'medium': { 
        '@id': 'dcterms:medium', 
        '@container': '@set', 
        '@type': '@vocab'
    },
    'date': { 
        '@id': 'dcterms:date', 
        '@type': 'xsd:date'
    },
    '@language': 'en',
    'label': {
        '@id': 'http://www.w3.org/2004/02/skos/core#prefLabel',
        '@language': null
    },
    'altLabel': {
        '@id': 'http://www.w3.org/2004/02/skos/core#altLabel',
        '@container': '@language',
        '@type': 'xsd:string'
    }
}";

    // when
    var context = new JObject(
        Base.Is("http://example.com/"),
        Vocab.Is(new Uri("http://schema.org/")),
        "dcterms".IsPrefixOf("http://purl.org/dc/terms/"),
        "xsd".IsPrefixOf(new Uri("http://www.w3.org/2001/XMLSchema#")),
        "title".IsProperty("dcterms:title"),
        "creator".IsProperty("dcterms:creator")
                 .Type().Id(),
        "medium".IsProperty("dcterms:medium")
                .Container().Set()
                .Type().Vocab(),
        "date".IsProperty("dcterms:date")
              .Type().Is("xsd:date"),
        "en".IsLanguage(),
        "label".IsProperty("http://www.w3.org/2004/02/skos/core#prefLabel")
               .Language(null),
        "altLabel".IsProperty("http://www.w3.org/2004/02/skos/core#altLabel")
                  .Container().Language()
                  .Type().Is("xsd:string"));

    // then
    context = JObject.Parse(context.ToString()); // DeepEqual fails otherwise
    Assert.True(JToken.DeepEquals(context, JObject.Parse(expected)), $"Actual context was {context}");
}
}
```

[coercion]: http://www.w3.org/TR/json-ld/#type-coercion
[reverse]: http://www.w3.org/TR/json-ld/#reverse-properties
[i8n]: http://www.w3.org/TR/json-ld/#string-internationalization
