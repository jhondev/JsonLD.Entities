// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace JsonLD.Entities.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeserializingJsonLD")]
    public partial class DeserializingJsonLDFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeserializingJsonLD.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeserializingJsonLD", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize compacted JSON-LD object")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeCompactedJSON_LDObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize compacted JSON-LD object", new string[] {
                        "JsonLD"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 5
    testRunner.Given("JSON-LD:", @"{
    ""@context"": {
        ""foaf"": ""http://xmlns.com/foaf/0.1/"",
        ""firstName"": ""foaf:givenName"",
        ""lastName"": ""foaf:familyName""
    },
    ""@id"": ""http://example.com/Person"",
    ""firstName"": ""Tomasz"",
    ""lastName"": ""Pluskiewicz"",
    ""http://example.com/ontology#dateOfBirth"": ""1975-08-15""
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
    testRunner.And("@context is:", "{\r\n    foaf: \"http://xmlns.com/foaf/0.1/\",\r\n    name: \"foaf:givenName\",\r\n    surn" +
                    "ame: \"foaf:familyName\",\r\n    birthDate: \"http://example.com/ontology#dateOfBirth" +
                    "\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.Person\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
    testRunner.Then("object should have property \'Name\' equal to \'Tomasz\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
    testRunner.And("object should have property \'Surname\' equal to \'Pluskiewicz\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.And("object should have DateTime property \'BirthDate\' equal to \'15-08-1975\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize single element into set")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsArray", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsEnumerable", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsCollection", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsSet", null)]
        public virtual void DeserializeSingleElementIntoSet(string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "JsonLD"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize single element into set", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 35
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": \"RDF\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\", \"@container\": \"@set\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
    testRunner.When(string.Format("I deserialize into \'{0}\'", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
    testRunner.Then("object should have property \'Interests\' containg string \'RDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize array into set")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsArray", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsEnumerable", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsCollection", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsSet", null)]
        public virtual void DeserializeArrayIntoSet(string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "JsonLD"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize array into set", @__tags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 60
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": [ \"RDF\", \"SPARQL\", \"OWL\" ]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\", \"@container\": \"@set\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
    testRunner.When(string.Format("I deserialize into \'{0}\'", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
    testRunner.Then("object should have property \'Interests\' containg string \'RDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
     testRunner.And("object should have property \'Interests\' containg string \'SPARQL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
     testRunner.And("object should have property \'Interests\' containg string \'OWL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize list")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize list", new string[] {
                        "JsonLD"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 87
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": { \"@list\": [ \"RDF\", \"SPARQL\" ] }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\", \"@container\": \"@list\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.HasInterestsList\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
    testRunner.Then("object should have property \'Interests\' containg string \'RDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
     testRunner.And("object should have property \'Interests\' containg string \'SPARQL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize list when @container isn\'t specified")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeListWhenContainerIsntSpecified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize list when @container isn\'t specified", new string[] {
                        "JsonLD"});
#line 106
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 107
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": { \"@list\": [ \"RDF\", \"SPARQL\" ] }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
    testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.HasInterestsList\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
    testRunner.Then("object should have property \'Interests\' containg string \'RDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
     testRunner.And("object should have property \'Interests\' containg string \'SPARQL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize single element into collection when @container isn\'t specified")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsArray", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsEnumerable", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsCollection", null)]
        [NUnit.Framework.TestCaseAttribute("JsonLD.Entities.Tests.Entities.HasInterestsSet", null)]
        public virtual void DeserializeSingleElementIntoCollectionWhenContainerIsntSpecified(string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "JsonLD"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize single element into collection when @container isn\'t specified", @__tags);
#line 126
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 127
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": \"RDF\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
    testRunner.When(string.Format("I deserialize into \'{0}\'", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
    testRunner.Then("object should have property \'Interests\' containg string \'RDF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize list into set")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeListIntoSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize list into set", new string[] {
                        "JsonLD"});
#line 151
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 152
    testRunner.Given("JSON-LD:", "{\r\n    \"@id\": \"http://example.com/Person\",\r\n    \"http://xmlns.com/foaf/0.1/topic_" +
                    "interest\": { \"@list\": [ \"RDF\", \"SPARQL\" ] }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 159
    testRunner.And("@context is:", "{\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"interests\": { \"@id\": \"foaf:top" +
                    "ic_interest\", \"@container\": \"@set\" }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
    testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.HasInterestsSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
    testRunner.Then("Should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize a graph of objects")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeAGraphOfObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize a graph of objects", new string[] {
                        "JsonLD"});
#line 170
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 171
    testRunner.Given("JSON-LD:", @"   [
     {
       ""@id"": ""_:autos1"",
       ""http://schema.org/name"": [
         {
           ""@value"": ""Siegfried Bufe""
         }
       ]
     },
     {
       ""@id"": ""http://wikibus.org/book/6"",
       ""@type"": [
           ""http://wikibus.org/ontology#Book""
       ],
       ""http://schema.org/author"": [
         {
           ""@id"": ""_:autos1""
         }
       ]
     }
   ]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 195
      testRunner.And("@context is:", "{\r\n  \"sch\": \"http://schema.org/\",\r\n  \"author\": \"sch:author\",\r\n  \"name\": \"sch:name" +
                    "\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
      testRunner.And("frame is", "{\r\n   \"@type\": \"http://wikibus.org/ontology#Book\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
     testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.Book\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
     testRunner.Then("object should have object property \'Author\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
      testRunner.And("object \'Author\' should have property \'Name\' equal to \'Siegfried Bufe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize type with converter")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeTypeWithConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize type with converter", new string[] {
                        "JsonLD"});
#line 214
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 215
    testRunner.Given("JSON-LD:", "{\r\n   \"@id\": \"http://example.com/TheIdentifier\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
     testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.WithConverter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
     testRunner.Then("object should have property \'Id\' equal to \'TheIdentifier\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deserialize nested type with converter")]
        [NUnit.Framework.CategoryAttribute("JsonLD")]
        public virtual void DeserializeNestedTypeWithConverter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deserialize nested type with converter", new string[] {
                        "JsonLD"});
#line 225
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 226
    testRunner.Given("JSON-LD:", "{\r\n   \"child\": {\r\n     \"@id\": \"http://example.com/TheIdentifier\"\r\n   }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
     testRunner.When("I deserialize into \'JsonLD.Entities.Tests.Entities.WithConverter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
     testRunner.Then("object should have property \'Id\' equal to \'TheIdentifier\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
